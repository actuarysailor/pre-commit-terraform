# Dockerfile.tools - Standalone Docker image for individual tool execution
FROM python:3.12-alpine@sha256:9b8808206f4a956130546a32cbdd8633bc973b19db2923b7298e6f90cc26db08 AS python_base

FROM python_base AS builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /bin_dir

RUN apk add --no-cache \
    # Builder deps
    bash=~5 \
    curl=~8 && \
    # Upgrade packages for be able get latest Checkov
    python3 -m pip install --no-cache-dir --upgrade \
        pip~=25.0 \
        setuptools~=75.8

COPY tools/install/ /install/

#
# Install required tools
#
ARG PRE_COMMIT_VERSION=${PRE_COMMIT_VERSION:-latest}
RUN touch /.env && \
    if [ "$PRE_COMMIT_VERSION" = "false" ]; then \
        echo "ERROR: PRE_COMMIT_VERSION cannot be 'false' - pre-commit is required" >&2 && exit 1; \
    elif [ -z "$PRE_COMMIT_VERSION" ]; then \
        echo "ERROR: PRE_COMMIT_VERSION is required" >&2 && exit 1; \
    fi
RUN /install/pre-commit.sh

#
# Install tools
#
ARG OPENTOFU_VERSION=${OPENTOFU_VERSION:-false}
ARG TERRAFORM_VERSION=${TERRAFORM_VERSION:-false}

ARG CHECKOV_VERSION=${CHECKOV_VERSION:-false}
ARG HCLEDIT_VERSION=${HCLEDIT_VERSION:-false}
ARG INFRACOST_VERSION=${INFRACOST_VERSION:-false}
ARG TERRAFORM_DOCS_VERSION=${TERRAFORM_DOCS_VERSION:-false}
ARG TERRAGRUNT_VERSION=${TERRAGRUNT_VERSION:-false}
ARG TERRASCAN_VERSION=${TERRASCAN_VERSION:-false}
ARG TFLINT_VERSION=${TFLINT_VERSION:-false}
ARG TFSEC_VERSION=${TFSEC_VERSION:-false}
ARG TFUPDATE_VERSION=${TFUPDATE_VERSION:-false}
ARG TRIVY_VERSION=${TRIVY_VERSION:-false}


# Tricky thing to install all tools by set only one arg.
# In RUN command below used `. /.env` <- this is sourcing vars that
# specified in step below
ARG INSTALL_ALL=${INSTALL_ALL:-false}
RUN if [ "$INSTALL_ALL" = "true" ] || [ "$INSTALL_ALL" = "latest" ]; then \
        echo "OPENTOFU_VERSION=latest"       >> /.env && \
        echo "TERRAFORM_VERSION=latest"      >> /.env && \
        echo "CHECKOV_VERSION=latest"        >> /.env && \
        echo "HCLEDIT_VERSION=latest"        >> /.env && \
        echo "INFRACOST_VERSION=latest"      >> /.env && \
        echo "TERRAFORM_DOCS_VERSION=latest" >> /.env && \
        echo "TERRAGRUNT_VERSION=latest"     >> /.env && \
        echo "TERRASCAN_VERSION=latest"      >> /.env && \
        echo "TFLINT_VERSION=latest"         >> /.env && \
        echo "TFSEC_VERSION=latest"          >> /.env && \
        echo "TFUPDATE_VERSION=latest"       >> /.env && \
        echo "TRIVY_VERSION=latest"          >> /.env ; \
    elif [ "$INSTALL_ALL" != "false" ]; then \
        echo "ERROR: INSTALL_ALL must be 'true', 'latest', or 'false'" >&2 ; exit 1 ; \
    fi

# Docker `RUN`s shouldn't be consolidated here
# hadolint global ignore=DL3059
RUN /install/opentofu.sh
RUN /install/terraform.sh

RUN /install/checkov.sh
RUN /install/hcledit.sh
RUN /install/infracost.sh
RUN /install/terraform-docs.sh
RUN /install/terragrunt.sh
RUN /install/terrascan.sh
RUN /install/tflint.sh
RUN /install/tfsec.sh
RUN /install/tfupdate.sh
RUN /install/trivy.sh


# Checking binaries versions and write it to debug file

# SC2086 - We do not need to quote "$F" variable, because it's not contain spaces
# DL4006 - Not Applicable for /bin/sh in alpine images. Disable, as recommended by check itself
# hadolint ignore=SC2086,DL4006
RUN . /.env && \
    F=tools_versions_info && \
    echo "=== Tool Versions ===" > $F && \
    (pre-commit --version 2>/dev/null || echo "pre-commit: ERROR") >> $F && \
    (if [ "$OPENTOFU_VERSION"       != "false" ]; then (./tofu --version 2>/dev/null | head -n 1 || echo "opentofu: ERROR") >> $F;            else echo "opentofu: SKIPPED" >> $F       ; fi) && \
    (if [ "$TERRAFORM_VERSION"      != "false" ]; then (./terraform --version 2>/dev/null | head -n 1 || echo "terraform: ERROR") >> $F;       else echo "terraform: SKIPPED" >> $F      ; fi) && \
    (if [ "$CHECKOV_VERSION"        != "false" ]; then (echo "checkov $(checkov --version 2>/dev/null)" || echo "checkov: ERROR") >> $F;     else echo "checkov: SKIPPED" >> $F        ; fi) && \
    (if [ "$HCLEDIT_VERSION"        != "false" ]; then (echo "hcledit $(./hcledit version 2>/dev/null)" || echo "hcledit: ERROR") >> $F;     else echo "hcledit: SKIPPED" >> $F        ; fi) && \
    (if [ "$INFRACOST_VERSION"      != "false" ]; then (./infracost --version 2>/dev/null || echo "infracost: ERROR") >> $F;         else echo "infracost: SKIPPED" >> $F      ; fi) && \
    (if [ "$TERRAFORM_DOCS_VERSION" != "false" ]; then (./terraform-docs --version 2>/dev/null || echo "terraform-docs: ERROR") >> $F;              else echo "terraform-docs: SKIPPED" >> $F ; fi) && \
    (if [ "$TERRAGRUNT_VERSION"     != "false" ]; then (./terragrunt --version 2>/dev/null || echo "terragrunt: ERROR") >> $F;                  else echo "terragrunt: SKIPPED" >> $F     ; fi) && \
    (if [ "$TERRASCAN_VERSION"      != "false" ]; then (echo "terrascan $(./terrascan version 2>/dev/null)" || echo "terrascan: ERROR") >> $F; else echo "terrascan: SKIPPED" >> $F      ; fi) && \
    (if [ "$TFLINT_VERSION"         != "false" ]; then (./tflint --version 2>/dev/null || echo "tflint: ERROR") >> $F;                      else echo "tflint: SKIPPED" >> $F         ; fi) && \
    (if [ "$TFSEC_VERSION"          != "false" ]; then (echo "tfsec $(./tfsec --version 2>/dev/null)" || echo "tfsec: ERROR") >> $F;       else echo "tfsec: SKIPPED" >> $F          ; fi) && \
    (if [ "$TFUPDATE_VERSION"       != "false" ]; then (echo "tfupdate $(./tfupdate --version 2>/dev/null)" || echo "tfupdate: ERROR") >> $F; else echo "tfupdate: SKIPPED" >> $F       ; fi) && \
    (if [ "$TRIVY_VERSION"          != "false" ]; then (echo "trivy $(./trivy --version 2>/dev/null)" || echo "trivy: ERROR") >> $F;       else echo "trivy: SKIPPED" >> $F          ; fi) && \
    printf "\n\n\n" && cat $F && printf "\n\n\n"



FROM python_base

RUN apk add --no-cache \
    # pre-commit deps
    git=~2 \
    # All hooks deps
    bash=~5 \
    # pre-commit-hooks deps: https://github.com/pre-commit/pre-commit-hooks
    musl-dev=~1 \
    gcc=~14 \
    # entrypoint wrapper deps
    su-exec=~0.2 \
    # ssh-client for external private module in ssh
    openssh-client=~10

# Copy tools
COPY --from=builder \
    # Needed for all hooks
    /usr/local/bin/pre-commit \
    # Hooks and terraform binaries
    /bin_dir/ \
    /usr/local/bin/checkov* \
        /usr/bin/
# Copy pre-commit packages
COPY --from=builder /usr/local/lib/python3.12/site-packages/ /usr/local/lib/python3.12/site-packages/
# Copy terrascan policies
COPY --from=builder /root/ /root/

# Copy hook scripts for Docker-based hooks
COPY hooks/ /usr/local/bin/hooks/
COPY lib_getopt /usr/local/bin/
COPY src/pre_commit_terraform/ /usr/local/lib/python3.12/site-packages/pre_commit_terraform/

# Install hooks extra deps
RUN if ! grep -q '^terraform-docs: SKIPPED$' /usr/bin/tools_versions_info; then \
        apk add --no-cache perl=~5 \
    ; fi && \
    if ! grep -q '^infracost: SKIPPED$' /usr/bin/tools_versions_info; then \
        apk add --no-cache jq=~1 \
    ; fi && \
    # Fix git runtime fatal:
    # unsafe repository ('/lint' is owned by someone else)
    git config --global --add safe.directory /lint

COPY tools/entrypoint.sh /entrypoint.sh

# Copy hook scripts for docker_image language support
COPY hooks/ /usr/bin/hooks/
COPY lib_getopt /usr/bin/lib_getopt
RUN chmod +x /usr/bin/hooks/*.sh

ENV PRE_COMMIT_COLOR=${PRE_COMMIT_COLOR:-always}

ENV INFRACOST_API_KEY=${INFRACOST_API_KEY:-}
ENV INFRACOST_SKIP_UPDATE_CHECK=${INFRACOST_SKIP_UPDATE_CHECK:-false}

# Override entrypoint to allow direct tool execution
ENTRYPOINT []
CMD ["bash"]

# Copy hook scripts to make advanced functionality available
# (Removed redundant COPY hooks/ /usr/local/bin/hooks/)
COPY lib_getopt /usr/local/bin/

# Make hooks executable
RUN chmod +x /usr/local/bin/hooks/*.sh
